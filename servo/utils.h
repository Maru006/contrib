#pragma once
/*
Servo respond to varying widths of electrical pulse (HIGH) in the data line generated by a microcontrolelr (PCA9685).
The parameters for the pulses are:
1. the minimal pulse width
2. the maximual pulse width
3. and the repition rate.
The angle of the mechanical rotation is determined by the width of an electrical pulse that is applied to the control wire. This is a form of Pulse-width Modulation
The period of using 50hz refresh rate comes from the days where the signal was encoded in PPM format to be sent over the air. But with may "RC" servo, as long as the refresh rate (how many times per second the pulse is sent, a.k.a the pulse repition rate) is in the range of 40hz to 200hz the exact value of the refresh rate is irrelevant.
- https://en.wikipedia.org/wiki/Servo_control
*/
#define UPDATE_RATE 50


/*
Many hobby servos work well at PWM (a.k.a update rate) determines the resolution at which te 
Though the consensus may be that higher frequency means better resolution and fine-grain management of data out to the servo, servos are not all made the same. By this, some servo can handle higher PWM and some dont. 
So whilst the PCA9685 can send tune pulse-width within 1526Hz, the servo's attached to it may only process no more than 50Hz. 
If this is not clear yet, take for example: configuring a duty cycle of 40.123456789%. This means that the signal is at HIGH 40.123456789% of the the time. But if you have sub-par servo's attached, they may only recognise 40.1%.

The PWM frequency is defined by the prescale value using their formula in page 25.

see main.c
*/

/*
The PI5 i2c osc_clock speed is running at default of 100kHz:
1. Standard Mode: 100kHz
2. Fast Mode: 400kMHz
3. Fast Mode Plus: 1 MHz

Page 1 paragraph 2 of the PCA9685 states that the it has an internal 25MHz oscillator. But that an external 50MHz max oscillator can be used. 

Still, the two devices are running at two different osc_clock frequencies and may require some tuning for high precision. That said, in this particular example, the default is sufficient.

*/
#define PCA9685_OSC_CLOCK 25000000


/* PCA9685 DATASHEET REGISTERS */
#define MODE1 0x00
#define ADDR1 0x40
#define PRESCALE 0xFE


int write2reg(int fd, uint8_t reg, uint8_t data);

int setangle(int fd, uint8_t channel, int data, uint8_t prescale); 

int readreg(int fd, uint8_t reg);
